// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("backend.Models.Auth.APIDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<int>("ApiType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("APIDefs");
                });

            modelBuilder.Entity("backend.Models.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.Camera.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsImage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("backend.Models.News.LocalHeadline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HeadlineDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LocalHeadlines");
                });

            modelBuilder.Entity("backend.Models.News.NewsLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NewsLinks");
                });

            modelBuilder.Entity("backend.Models.Sports.ScoreRecord", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("away_team")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("commence_time")
                        .HasColumnType("TEXT");

                    b.Property<bool>("completed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("home_team")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("last_update")
                        .HasColumnType("TEXT");

                    b.Property<string>("sport_key")
                        .HasColumnType("TEXT");

                    b.Property<string>("sport_title")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("backend.Models.Sports.SportCategory", b =>
                {
                    b.Property<string>("key")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("group")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("key");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("backend.Models.Sports.TeamScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScoreRecordid")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("score")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScoreRecordid");

                    b.ToTable("TeamScore");
                });

            modelBuilder.Entity("backend.Models.Weather.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherRecordRootId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeatherRecordRootId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("backend.Models.Weather.Coord", b =>
                {
                    b.Property<int>("CoordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("lat")
                        .HasColumnType("REAL");

                    b.Property<double>("lon")
                        .HasColumnType("REAL");

                    b.HasKey("CoordId");

                    b.ToTable("WeatherCoordRecords");
                });

            modelBuilder.Entity("backend.Models.Weather.Main", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("feels_like")
                        .HasColumnType("REAL");

                    b.Property<int?>("grnd_level")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("humidity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("pressure")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("sea_level")
                        .HasColumnType("INTEGER");

                    b.Property<double>("temp")
                        .HasColumnType("REAL");

                    b.Property<double>("temp_max")
                        .HasColumnType("REAL");

                    b.Property<double>("temp_min")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.ToTable("WeatherMainRecords");
                });

            modelBuilder.Entity("backend.Models.Weather.Sys", b =>
                {
                    b.Property<int>("SysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("country")
                        .HasColumnType("TEXT");

                    b.Property<int?>("sunrise")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("sunset")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("SysId");

                    b.ToTable("WeatherSysRecords");
                });

            modelBuilder.Entity("backend.Models.Weather.Weather", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WeatherRecordRootId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("main")
                        .HasColumnType("TEXT");

                    b.HasKey("WeatherId");

                    b.HasIndex("WeatherRecordRootId");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("backend.Models.Weather.WeatherRecord", b =>
                {
                    b.Property<int>("RootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoordId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SysId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WindId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("base")
                        .HasColumnType("TEXT");

                    b.Property<int?>("cod")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("dt")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("mainid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("timezone")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("RootId");

                    b.HasIndex("CoordId");

                    b.HasIndex("SysId");

                    b.HasIndex("WindId");

                    b.HasIndex("mainid");

                    b.ToTable("WeatherRecords");
                });

            modelBuilder.Entity("backend.Models.Weather.Wind", b =>
                {
                    b.Property<int>("WindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("deg")
                        .HasColumnType("INTEGER");

                    b.Property<double>("gust")
                        .HasColumnType("REAL");

                    b.Property<double>("speed")
                        .HasColumnType("REAL");

                    b.HasKey("WindId");

                    b.ToTable("WeatherWindRecords");
                });

            modelBuilder.Entity("backend.Models.Sports.TeamScore", b =>
                {
                    b.HasOne("backend.Models.Sports.ScoreRecord", null)
                        .WithMany("scores")
                        .HasForeignKey("ScoreRecordid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.Weather.City", b =>
                {
                    b.HasOne("backend.Models.Weather.WeatherRecord", "WeatherRecord")
                        .WithMany()
                        .HasForeignKey("WeatherRecordRootId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("WeatherRecord");
                });

            modelBuilder.Entity("backend.Models.Weather.Weather", b =>
                {
                    b.HasOne("backend.Models.Weather.WeatherRecord", null)
                        .WithMany("weather")
                        .HasForeignKey("WeatherRecordRootId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backend.Models.Weather.WeatherRecord", b =>
                {
                    b.HasOne("backend.Models.Weather.Coord", "coord")
                        .WithMany()
                        .HasForeignKey("CoordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Weather.Sys", "sys")
                        .WithMany()
                        .HasForeignKey("SysId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Weather.Wind", "wind")
                        .WithMany()
                        .HasForeignKey("WindId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.Weather.Main", "main")
                        .WithMany()
                        .HasForeignKey("mainid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("coord");

                    b.Navigation("main");

                    b.Navigation("sys");

                    b.Navigation("wind");
                });

            modelBuilder.Entity("backend.Models.Sports.ScoreRecord", b =>
                {
                    b.Navigation("scores");
                });

            modelBuilder.Entity("backend.Models.Weather.WeatherRecord", b =>
                {
                    b.Navigation("weather");
                });
#pragma warning restore 612, 618
        }
    }
}
